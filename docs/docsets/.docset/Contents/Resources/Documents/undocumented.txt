ScrollViewExtensions.swift
	public func scrollToBottom(animated:Bool = false)
AsyncAwait.swift
	public class AsyncAwait
	public func Async(asyncOn:VoidBlock, awaitOn:VoidBlock)
ImageCache.swift
	public func fetchImages(urlStrs: [String], completed:ImagesBlock)
	public func fetchImage(ulrStr: String) -> UIImage?
	public func fetchImageFakeScale(urlStr:String, completed:ImageBlock)
StringExtensions.swift
	public func contains(otherString: String) -> Bool
	public func any(equalTo:String...) -> Bool
	mutating public func left(numberOfChars:Int)
Timer.swift
	public protocol TimerProtocol
	func start()
	func stop()
	var fired:Event<Void> {get}
	var isRunning:Bool {get}
	public init(interval:NSTimeInterval)
	public func start()
	public var isRunning:Bool
	public func stop()
	public let fired:Event<Void> = Event<Void>()
Event.swift
	public class Event<T>
	public init()
	public func raise(data: T)
	public func addHandler<U: AnyObject>(target: U,
        handler: (U) -> EventHandler) -> Disposable
	public protocol Disposable
	func dispose()
LocalNotification.swift
	public protocol LocationNotificationProtocol
	var body:String? {get set}
	var action:String? {get set}
	var date:NSDate? {get set}
	var category:String? {get set}
	func schedule()
	func register()
	public class LocationNotificationMock : LocationNotificationProtocol
	public var body:String?
	public var action:String?
	public var date:NSDate?
	public var category:String?
	public func schedule()
	public func register()
	public class LocalNotification : LocationNotificationProtocol
	public var body:String?
	public var action:String?
	public var date:NSDate?
	public var category:String?
	public init() {}
	public func schedule()
	public func register()
Json.swift
	public enum JsonError : ErrorType
	case PathNotFound(path:JsonPath)
	case InvalidPath(pathName:String)
	case KeyNotFound(key:String)
	case ConversionError(key:String, value:AnyObject)
	public struct JsonPath
	public let name:String
	public let rootPath:PathElement
	public init(name:String, rootPath:PathElement)
	public final class Json
	public init(jsonData: JsonKeyValue, paths:JsonPath...) throws
	public func dateValue(pathName:String, key:String) throws -> NSDate
DictionaryExtensions.swift
	public enum DictionaryConvertError : ErrorType
	case MissingKey
	case ConversionError
	public func toFloat(key:Key) -> Float?
	public func toDouble(key:Key) -> Double?
	public func toDate(key:Key) -> NSDate?
	public func unwrappedValue(key:Key) throws -> Value
	public func toDate(key:Key) throws -> NSDate
	public func toDouble(key:Key) throws -> Double
	public func toInt(key:Key) -> Int?
BaseOperation.swift
	public class BaseOperation : NSOperation
	override public func start()
	override public var asynchronous:Bool
	override public var executing:Bool
	override public var finished:Bool
NetworkOperation.swift
	case HTTPError(Int)
	case JSONError(NSError)
	case None
	public var fetchError: FetchError = FetchError.None
	public func addParam(key: String, value: String)
	public init(urlStr: String)
	public func fetchJSON(success: JsonBlock, failure: ErrorBlock)
DateExtensions.swift
	public func -(left:NSDate, right:NSDate) -> (month:Int, day:Int, year:Int, hour:Int, minute:Int, second:Int)
	public func addDays(numberOfDays:Int) -> NSDate
CollectionExtensions.swift
	public func isValidIndex(index:Int) -> Bool
FileManagerExtensions.swift
	public func cachePathFile(fileName:String) -> String
	public func fileDateTime(fileName:String) -> NSDate?
