ScrollViewExtensions.swift
	public func scrollToBottom(animated:Bool = false)
AsyncAwait.swift
	public class AsyncAwait
	public static func Await<T>(asyncOn:() -> T, awaitOn:(T) -> Void)
ImageCache.swift
	public func fetchImages(urlStrs: [String], completed:ImagesBlock)
	public func fetchImage(ulrStr: String) -> UIImage?
	public func fetchImageFakeScale(urlStr:String, completed:ImageBlock)
StringExtensions.swift
	public func contains(otherString: String) -> Bool
	public func any(equalTo:String...) -> Bool
	mutating public func left(numberOfChars:Int)
Timer.swift
	public protocol TimerProtocol
	func start()
	func stop()
	var fired:Event<Void> {get}
	var isRunning:Bool {get}
	public init(interval:NSTimeInterval)
	public func start()
	@objc func timerFired()
	public var isRunning:Bool
	public func stop()
	public let fired:Event<Void> = Event<Void>()
Event.swift
	public class Event<T>
	public init()
	public func raise(data: T)
	public func addHandler<U: AnyObject>(target: U,
        handler: (U) -> EventHandler) -> Disposable
	public protocol Disposable
	func dispose()
StringBuilder.swift
	let delimiter:String
LocalNotification.swift
	public protocol LocationNotificationProtocol
	var body:String? {get set}
	var action:String? {get set}
	var date:NSDate? {get set}
	var category:String? {get set}
	func schedule()
	func register()
	public class LocationNotificationMock : LocationNotificationProtocol
	public var body:String?
	public var action:String?
	public var date:NSDate?
	public var category:String?
	var scheduled:Int = 0
	public func schedule()
	var registered:Int = 0
	public func register()
	public class LocalNotification : LocationNotificationProtocol
	public var body:String?
	public var action:String?
	public var date:NSDate?
	public var category:String?
	public init() {}
	public func schedule()
	public func register()
DictionaryExtensions.swift
	public enum DictionaryConvertError : ErrorType
	case MissingKey
	case ConversionError
	public func toFloat(key:Key) -> Float?
	public func toDouble(key:Key) -> Double?
	public func toDate(key:Key) -> NSDate?
	public func unwrappedValue(key:Key) throws -> Value
	public func toDate(key:Key) throws -> NSDate
	public func toString(key:Key) throws -> String
	public func toDouble(key:Key) throws -> Double
	public func toInt(key:Key) -> Int?
NumberExtensions.swift
	let halfDegrees = 180.0
	public func toDegrees() -> Double
	public func toRadians() -> Double
BaseOperation.swift
	public class BaseOperation : NSOperation
	override public func start()
	var anyDependencyHasErrors:Bool
	override public var asynchronous:Bool
	override public var executing:Bool
	override public var finished:Bool
CurrentDateTime.swift
	public protocol CurrentDateFetchable
	func currentDateTime() -> NSDate
	public struct CurrentDateFetcher: CurrentDateFetchable
	public init()
	public func currentDateTime() -> NSDate
NetworkOperation.swift
	case HTTPError(Int)
	case JSONError(NSError)
	case None
	public var fetchError: FetchError = FetchError.None
	public func addParam(key: String, value: String)
	public init(urlStr: String)
	public func fetchJSON(success: JsonBlock, failure: ErrorBlock)
Json.swift
	public enum EnumFieldError: ErrorType
	case MissingField(fieldName: String)
	case ConversionError(fieldName: String)
	case DateParseError(fieldName: String)
	case MissingPath(fieldName: String)
	func extract() throws -> ExtractedType
	case Int
	case Float
	case String
	case StringArray
	case JsonKeyValueArray
	case JsonKeyValue
	case IntArray
	case FloatArray
	case DateArray
	func extract<T>(field: JsonFieldable) throws -> T
	func extract<T>(field: JsonFieldable, defaultValue: T) throws -> T
	func extractString(field: JsonFieldable) throws -> String
	func extractFloat(field: JsonFieldable) throws -> Float
	func extractInt(field: JsonFieldable) throws -> Int
DateExtensions.swift
	public func -(left:NSDate, right:NSDate) -> (month:Int, day:Int, year:Int, hour:Int, minute:Int, second:Int)
	public func toMonthDayYearHourMinutesSeconds() -> (month:Int, day:Int, year:Int, hour:Int, minutes:Int, seconds:Int)
	public func toJullianDayNumber() -> Double
	public static func fromMonth(month:Int, day:Int, year:Int) -> NSDate?
	public func fromDay(percentage:Double) -> NSDate?
CollectionExtensions.swift
	public func AllSameSize(arraysToCheck: Array<AnyObject>...) -> Bool
	public func first(fn: (Element) -> Bool) -> Element?
	public func isValidIndex(index:Int) -> Bool
FileManagerExtensions.swift
	public func cachePathFile(fileName:String) -> String
	public func fileDateTime(fileName:String) -> NSDate?
